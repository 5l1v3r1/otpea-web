{"version":3,"sources":["store/actions.js","components/AccountForm.js","components/AccountList.js","components/Empty.js","components/Header.js","components/RemovePrompt.js","components/App.js","util.js","store/time.reducer.js","store/ui.reducer.js","store/store.js","store/accounts.reducer.js","serviceWorker.js","index.js"],"names":["nextAccountId","allActions","payload","type","addAccount","Object","objectSpread","id","cancelAddAccount","connect","_ref","accountName","secret","isVisible","react_default","a","createElement","className","onClick","autoComplete","onSubmit","event","preventDefault","name","value","placeholder","required","ref","el","aria-label","toggleRemoveAccount","_ref2","accounts","time","ui","currentInterval","map","account","currentOTP","TOTP","now","key","copy","Empty","href","target","rel","toggleAddAccount","removeAccount","cancelRemoveAccount","accountId","hasAccounts","Boolean","length","components_Header","components_AccountForm","addingAccount","components_RemovePrompt","accountToBeRemoved","removingAccount","components_AccountList","components_Empty","getCurrentIntervalId","Math","floor","Date","initialState","store","createStore","combineReducers","state","arguments","undefined","concat","toConsumableArray","filter","applyMiddleware","logger","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","rootElement","document","getElementById","render","es","components_App","secondsToNextTick","getSeconds","setTimeout","setInterval","action","dispatch","startInterval","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3fa65140.chunk.js","sourcesContent":["let nextAccountId = 1;\n\n/* Account Actions */\nconst doAddAccount = payload => ({\n  type: \"ACCOUNT_ADDED\",\n  payload: { ...payload, id: nextAccountId++ }\n});\nconst doRemoveAccount = payload => ({ type: \"ACCOUNT_REMOVED\", payload });\n\n/* Time Actions */\nconst doChangeInterval = payload => ({ type: \"INTERVAL_CHANGED\", payload });\n\n/* UI Actions */\nconst doToggleAddAccount = () => ({ type: \"ADD_ACCOUNT_TOGGLED\" });\nconst doCancelAddAccount = () => ({ type: \"ADD_ACCOUNT_CANCELLED\" });\nconst doToggleRemoveAccount = payload => ({\n  type: \"REMOVE_ACCOUNT_TOGGLED\",\n  payload\n});\nconst doCancelRemoveAccount = () => ({ type: \"REMOVE_ACCOUNT_CANCELLED\" });\n\nexport const allActions = {\n  /* Account Actions */\n  addAccount: doAddAccount,\n  removeAccount: doRemoveAccount,\n  /* Time Actions */\n  changeInterval: doChangeInterval,\n  /* UI Actions */\n  toggleAddAccount: doToggleAddAccount,\n  cancelAddAccount: doCancelAddAccount,\n  toggleRemoveAccount: doToggleRemoveAccount,\n  cancelRemoveAccount: doCancelRemoveAccount\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { allActions } from \"../store/actions\";\n\nconst AccountForm = ({ isVisible, addAccount, cancelAddAccount }) => {\n  let accountName, secret;\n\n  return (\n    <div className={isVisible ? \"modal is-active\" : \"modal\"}>\n      <div className=\"modal-background\" onClick={cancelAddAccount} />\n      <div className=\"modal-content\">\n        <div className=\"box\">\n          <form\n            autoComplete=\"off\"\n            onSubmit={event => {\n              event.preventDefault();\n              addAccount({\n                name: accountName.value,\n                secret: secret.value\n              });\n              // Clear inputs so that same values aren't pre-filled next time\n              accountName.value = secret.value = \"\";\n            }}>\n            <div className=\"field is-horizontal\">\n              <div className=\"field-label is-normal\">\n                <label className=\"label\">Name</label>\n              </div>\n              <div className=\"field-body\">\n                <div className=\"field\">\n                  <div className=\"control\">\n                    <input\n                      type=\"text\"\n                      className=\"input\"\n                      name=\"accountName\"\n                      placeholder=\"GitHub\"\n                      required\n                      ref={el => (accountName = el)}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"field is-horizontal\">\n              <div className=\"field-label is-normal\">\n                <label className=\"label\">Secret</label>\n              </div>\n              <div className=\"field-body\">\n                <div className=\"field\">\n                  <div className=\"control\">\n                    <input\n                      type=\"text\"\n                      className=\"input\"\n                      name=\"secret\"\n                      placeholder=\"n34h8yv2n80cxkv1\"\n                      required\n                      ref={el => (secret = el)}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"field is-grouped is-grouped-right\">\n              <p className=\"control\">\n                <input\n                  type=\"button\"\n                  className=\"button\"\n                  value=\"Cancel\"\n                  onClick={cancelAddAccount}\n                />\n              </p>\n              <p className=\"control\">\n                <input\n                  type=\"submit\"\n                  className=\"button is-primary\"\n                  value=\"Save\"\n                />\n              </p>\n            </div>\n          </form>\n        </div>\n      </div>\n      <button\n        className=\"modal-close is-large\"\n        aria-label=\"close\"\n        onClick={cancelAddAccount}\n      />\n    </div>\n  );\n};\n\nconst { addAccount, cancelAddAccount } = allActions;\n\nexport default connect(\n  null,\n  { addAccount, cancelAddAccount }\n)(AccountForm);\n","import copy from \"copy-text-to-clipboard\";\nimport { TOTP } from \"jsotp\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { allActions } from \"../store/actions\";\n\nconst AccountList = ({ accounts, toggleRemoveAccount }) => (\n  <div>\n    {accounts.map(account => {\n      const currentOTP = TOTP(account.secret).now();\n      const copyOTP = () => copy(currentOTP);\n\n      return (\n        <section className=\"box\" key={account.id}>\n          <div className=\"level is-mobile\">\n            <div className=\"level-left\">\n              <span className=\"level-item\">{account.name}</span>\n            </div>\n            <div className=\"level-right\">\n              <span className=\"level-item is-size-4 has-text-weight-bold\">\n                {currentOTP}\n              </span>\n              <button\n                className=\"level-item button is-small is-bordered\"\n                onClick={copyOTP}>\n                Copy\n              </button>\n              <span\n                className=\"level-item delete\"\n                onClick={() => toggleRemoveAccount(account.id)}\n              />\n            </div>\n          </div>\n        </section>\n      );\n    })}\n  </div>\n);\n\nconst select = ({ accounts, time, ui }) => ({\n  accounts,\n  // Not directly used, but forces component to reload when OTP needs to be changed\n  currentInterval: time.currentInterval\n});\n\nconst { toggleRemoveAccount } = allActions;\n\nexport default connect(\n  select,\n  { toggleRemoveAccount }\n)(AccountList);\n","import React from \"react\";\n\nconst Empty = () => (\n  <section className=\"section has-text-centered\">\n    <p className=\"is-size-2\">¯\\_(ツ)_/¯</p>\n    <p className=\"is-size-4\">Add an account to generate one-time passwords.</p>\n    <p>\n      You can generate a time-based OTP for authenticating on services like\n      Google, GitHub, WordPress.com,{\" \"}\n      <a\n        href=\"https://twofactorauth.org/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\">\n        and many more\n      </a>\n      .\n    </p>\n  </section>\n);\n\nexport default Empty;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { allActions } from \"../store/actions\";\n\nconst Header = ({ toggleAddAccount }) => (\n  <header className=\"level is-mobile\">\n    <div className=\"level-left\">\n      <h1 className=\"level-item title\">OTPea</h1>\n    </div>\n    <div className=\"level-right\">\n      <button\n        className=\"level-item button is-primary\"\n        onClick={toggleAddAccount}>\n        Add account\n      </button>\n    </div>\n  </header>\n);\n\nconst { toggleAddAccount } = allActions;\n\nexport default connect(\n  null,\n  { toggleAddAccount }\n)(Header);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { allActions } from \"../store/actions\";\n\nconst RemovePrompt = ({\n  isVisible,\n  accountId,\n  removeAccount,\n  cancelRemoveAccount\n}) => (\n  <div className={isVisible ? \"modal is-active\" : \"modal\"}>\n    <div className=\"modal-background\" onClick={cancelRemoveAccount} />\n    <div className=\"modal-content\">\n      <div className=\"box\">\n        <p>Remove this account?</p>\n        <div className=\"field is-grouped is-grouped-right\">\n          <p className=\"control\">\n            <button className=\"level-item button\" onClick={cancelRemoveAccount}>\n              Cancel\n            </button>\n          </p>\n          <p className=\"control\">\n            <button\n              className=\"level-item button is-danger\"\n              onClick={() => removeAccount(accountId)}>\n              Remove\n            </button>\n          </p>\n        </div>\n      </div>\n    </div>\n    <button\n      className=\"modal-close is-large\"\n      aria-label=\"close\"\n      onClick={cancelRemoveAccount}\n    />\n  </div>\n  // <div className=\"level is-mobile is-pulled-right\">\n  //   <div className=\"level-left\" />\n  //   <div className=\"level-right\">\n  //     <span className=\"level-item\">Remove this account?</span>\n  //     <button\n  //       className=\"level-item button is-small is-bordered\"\n  //       onClick={cancelRemoveAccount}>\n  //       No\n  //     </button>\n  //     <button\n  //       className=\"level-item button is-small is-bordered is-danger\"\n  //       onClick={() => removeAccount(accountId)}>\n  //       Yes\n  //     </button>\n  //   </div>\n  // </div>\n);\n\nconst { removeAccount, cancelRemoveAccount } = allActions;\n\nexport default connect(\n  null,\n  { removeAccount, cancelRemoveAccount }\n)(RemovePrompt);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport AccountForm from \"./AccountForm\";\nimport AccountList from \"./AccountList\";\nimport Empty from \"./Empty\";\nimport Header from \"./Header\";\nimport RemovePrompt from \"./RemovePrompt\";\n\nconst App = ({ hasAccounts, ui }) => (\n  <main className=\"section is-clipped\">\n    <div className=\"container\">\n      <Header />\n      <AccountForm isVisible={ui.addingAccount} />\n      <RemovePrompt\n        accountId={ui.accountToBeRemoved}\n        isVisible={ui.removingAccount}\n      />\n      {hasAccounts ? <AccountList /> : <Empty />}\n    </div>\n  </main>\n);\n\nconst select = ({ accounts, ui }) => ({\n  hasAccounts: Boolean(accounts.length),\n  ui\n});\n\nexport default connect(\n  select,\n  null\n)(App);\n","import { allActions } from \"./store/actions\";\nimport { store } from \"./store/store\";\n\n/**\n * Return a unique identifier for the current 30-second interval\n */\nexport const getCurrentIntervalId = () => Math.floor(Date.now() / 30000);\n\nlet interval;\n\n/**\n * Start dispatching interval change actions at\n * every 0th and 30th second of each minute\n */\nexport const startInterval = () => {\n  const secondsToNextTick = 30 - (new Date().getSeconds() % 30);\n  setTimeout(() => {\n    interval = setInterval(() => {\n      const currentInterval = getCurrentIntervalId();\n      const action = allActions.changeInterval(currentInterval);\n      store.dispatch(action);\n    }, 30000);\n  }, secondsToNextTick * 1000);\n};\n\nexport const stopInterval = () => {\n  clearInterval(interval);\n};\n","import { getCurrentIntervalId } from \"../util\";\n\nconst initialState = {\n  currentInterval: getCurrentIntervalId()\n};\n\nexport const time = (state = initialState, { type, payload }) => {\n  if (type === \"INTERVAL_CHANGED\") {\n    return { ...state, currentInterval: payload };\n  }\n\n  return state;\n};\n","const initialState = {\n  addingAccount: false,\n  removingAccount: false,\n  accountToBeRemoved: null\n};\n\nexport const ui = (state = initialState, { type, payload }) => {\n  if (type === \"ADD_ACCOUNT_TOGGLED\") {\n    return { ...state, addingAccount: !state.addingAccount };\n  }\n\n  if (type === \"ACCOUNT_ADDED\" || type === \"ADD_ACCOUNT_CANCELLED\") {\n    return { ...state, addingAccount: false };\n  }\n\n  if (type === \"REMOVE_ACCOUNT_TOGGLED\") {\n    return {\n      ...state,\n      removingAccount: !state.removingAccount,\n      accountToBeRemoved: payload\n    };\n  }\n\n  if (type === \"ACCOUNT_REMOVED\" || type === \"REMOVE_ACCOUNT_CANCELLED\") {\n    return { ...state, removingAccount: false, accountToBeRemoved: null };\n  }\n\n  return state;\n};\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport { accounts } from \"./accounts.reducer\";\nimport { time } from \"./time.reducer\";\nimport { ui } from \"./ui.reducer\";\nimport { logger } from \"redux-logger\";\n\nexport const store = createStore(\n  combineReducers({\n    accounts,\n    time,\n    ui\n  }),\n  applyMiddleware(logger)\n);\n","export const accounts = (state = [], { type, payload }) => {\n  if (type === \"ACCOUNT_ADDED\") {\n    return [...state, payload];\n  }\n\n  if (type === \"ACCOUNT_REMOVED\") {\n    return state.filter(account => account.id !== payload);\n  }\n\n  return state;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App.js\";\nimport { store } from \"./store/store.js\";\nimport \"./styles.sass\";\nimport { startInterval } from \"./util.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\nstartInterval();\nserviceWorker.register();\n"],"sourceRoot":""}